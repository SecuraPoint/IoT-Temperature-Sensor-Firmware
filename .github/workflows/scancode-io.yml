name: Build and Run ScanCode Project

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-scan:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake python3-pip curl jq
          pip3 install conan
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          conan profile detect
      
      - name: Create conan.lock file
        run: conan lock create conanfile.txt --lockfile-out=conan.lock

      - name: Install project dependencies with Conan
        run: |
          mkdir -p build
          conan install . --output-folder=build --build=missing

      - name: Configure with CMake
        run: |
          cmake -Bbuild -S. -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: |
          cmake --build build

      - name: Package build output
        run: |
          tar --exclude='.git' -czf build-artifact.tar.gz .

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.sha }}
          name: Build ${{ github.sha }}
          draft: false
          prerelease: false
          files: build-artifact.tar.gz

      - name: Extract download URL of release asset
        id: get_download_url
        run: |
          response=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/build-${{ github.sha }})

          download_url=$(echo "$response" | jq -r '.assets[0].browser_download_url')
          echo "DOWNLOAD_URL=$download_url" >> $GITHUB_ENV

      - name: Run scan_project.py with release asset
        env:
          SCANCODEIO_URL: ${{ secrets.SCANCODEIO_URL }}
          SCANCODEIO_API_KEY: ${{ secrets.SCANCODEIO_API_KEY }}
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          PIPELINES: ${{ vars.PIPELINES }}
          INPUT_URLS: ${{ env.DOWNLOAD_URL }}
        run: |
          cd scancode-io
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python scan_project.py
